{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 # Theoretical Foundation Derivation of Projectile Motion from Newton's Laws We begin by considering a projectile launched with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) above the horizontal. The motion can be decomposed into two perpendicular components: Horizontal (x-axis) Vertical (y-axis) Assumptions: No air resistance Constant gravitational acceleration \\(g\\) Launched from the origin at time \\(t = 0\\) 1. Equations of Motion Horizontal motion (constant velocity): Acceleration: \\(a_x=0\\) Velocity: \\(v_x=v_0\\cos(\\theta)\\) Displacement: \\( \\(x(t)=v_0\\cos(\\theta)\\cdot t\\) \\) Vertical motion (accelerated motion): Acceleration: \\(a_y=-g\\) Velocity: \\(v_y=v_0\\sin(\\theta)-gt\\) Displacement: \\( \\(y(t)=v_0\\sin(\\theta)\\cdot t-\\frac{1}{2}gt^2\\) \\) 2. Time of Flight The projectile hits the ground when \\(y(t) = 0\\) . Solving: \\[ v_0\\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2 = 0 \\] \\[ t(v_0\\sin(\\theta) - \\frac{1}{2}gt) = 0 \\] Non-zero solution: \\[ t = \\frac{2v_0\\sin(\\theta)}{g} \\] \u2194 3. Horizontal Range \\(R\\) Substitute the total time of flight into the horizontal displacement: \\[ R = x(t) = v_0\\cos(\\theta) \\cdot \\frac{2v_0\\sin(\\theta)}{g} \\] \\[ \\boxed{R = \\frac{v_0^2\\sin(2\\theta)}{g}} \\] This shows that range is maximum when \\(\\sin(2\\theta) = 1\\) , i.e. \\(\\theta = 45^\\circ\\) 4. Effect of Initial Conditions on Range Initial Velocity \\(v_0\\) : Range is proportional to \\(v_0^2\\) Doubling speed increases range fourfold Angle \\(\\theta\\) : Affects both vertical and horizontal components Maximum range at \\(\\theta = 45^\\circ\\) (in symmetric conditions) Gravitational Acceleration \\(g\\) : Inverse relation: higher gravity \u2192 shorter range Launch Height (not included above) : Adds vertical displacement Increases total time in air \u2192 longer range (needs new derivation) These equations form the idealized model of projectile motion, laying the foundation for further numerical or simulation-based analysis. Analysis of the Range 1. Mathematical Relationship Between Range and Angle Using the derived formula from earlier: \\[ R=\\frac{v_0^2\\sin(2\\theta)}{g} \\] Where: - \\(R\\) is the horizontal range - \\(v_0\\) is the initial velocity - \\(\\theta\\) is the launch angle - \\(g\\) is the acceleration due to gravity Key Observations: Range depends non-linearly on \\(\u03b8\\) through \\(sin(2\u03b8)\\) . The function \\(sin(2\u03b8)\\) reaches its maximum value of 1 when \\(2\u03b8=90\u00b0\\) . Therefore, the maximum range occurs at: \\( \\(\\boxed{\u03b8=45\u00b0}\\) \\) 2. Effect of Initial Velocity ( \\(v_0\\) ) From the formula: \\[ R\\propto v_0^2 \\] Doubling \\(v_0\\) quadruples the range. Plotting range vs. angle for different velocities shifts the amplitude of the curve but not the position of the peak. 3. Effect of Gravitational Acceleration ( \\(g\\) ) Range is inversely proportional to \\(g\\) : \\[ R\\propto\\frac{1}{g} \\] Lower gravity (e.g., on the Moon) results in a longer range . Higher gravity (e.g., on Jupiter) produces a shorter range . 4. Launch Height (Advanced) When the projectile is launched from a height \\(h>0\\) , total time of flight increases. The vertical displacement becomes: \\[ y(t)=v_0\\sin(\\theta)t-\\frac{1}{2}gt^2+h \\] To find time of flight \\(t_f\\) , solve: \\[ 0=h+v_0\\sin(\\theta)t_f-\\frac{1}{2}gt_f^2 \\] This is a quadratic in \\(t_f\\) : \\[ \\frac{1}{2}gt_f^2-v_0\\sin(\\theta)t_f-h=0 \\] Solve for \\(t_f\\) using the quadratic formula: \\[ t_f=\\frac{v_0\\sin(\\theta)+\\sqrt{(v_0\\sin(\\theta))^2+2gh}}{g} \\] Then calculate range: \\[ R=v_0\\cos(\\theta)\\cdot t_f \\] Note: Range increases with height. The angle for maximum range no longer remains 45\u00b0 when launching from a height. Summary Parameter Effect on Range Initial Velocity \\(v_0\\) Quadratic increase ( \\(\\propto v_0^2\\) ) Launch Angle \\(\\theta\\) Max at \\(45^\\circ\\) (flat launch) Gravity \\(g\\) Inversely proportional Launch Height \\(h\\) Increases range, changes optimal angle This analysis provides a full picture of how the range responds to varying parameters in ideal and slightly more realistic conditions. Practical Applications of Projectile Motion 1. Real-World Situations Involving Projectile Motion Projectile motion is observed in various natural and engineered systems: Sports: A soccer ball, basketball, or javelin follows a projectile path after being launched. The initial velocity and launch angle determine whether the ball reaches the goal or basket. Engineering: Water fountains or fire hoses arc based on launch parameters. Ballistics in defense and aerospace engineering heavily depend on accurate projectile modeling. Astrophysics: Space missions use orbital mechanics \u2014 an extension of projectile motion under gravity. Launching a probe involves solving similar equations in non-Earth gravity fields. 2. Effects of Terrain, Drag, and Wind a. Uneven Terrain When projectiles land on non-flat surfaces , the simple range formula no longer applies. Suppose the landing height is different from the launch height \\(h_0\\) , then total time of flight \\(t_f\\) must be found by solving: \\[ y(t)=v_0\\sin(\\theta)t-\\frac{1}{2}gt^2+h_0 \\] Final range becomes: \\[ R=v_0\\cos(\\theta)\\cdot t_f \\] Requires solving a quadratic equation for \\(t_f\\) and using it in range computation. b. Air Resistance (Drag) Real trajectories are affected by drag force proportional to velocity: \\[ F_d=-kv \\] Where: - \\(F_d\\) is the drag force, - \\(k\\) is a constant depending on air density and shape, - \\(v\\) is velocity. This leads to nonlinear differential equations : In horizontal direction: \\( \\(m\\frac{dv_x}{dt}=-kv_x\\) \\) In vertical direction: \\( \\(m\\frac{dv_y}{dt}=-mg-kv_y\\) \\) These must be solved numerically using techniques like Euler\u2019s method or Runge-Kutta. c. Wind Wind introduces additional velocity components: - Tailwind increases range. - Headwind decreases range. - Crosswind changes the direction of the projectile, affecting accuracy. Effective horizontal velocity becomes: \\[ v_{\\text{effective}}=v_0\\cos(\\theta)\\pm v_{\\text{wind}} \\] 3. Adapting the Model To make the model more realistic: Include drag : Use numerical simulation (e.g., Runge-Kutta) to solve motion with air resistance. Include wind : Modify initial velocity vector to account for wind speed and direction. Simulate terrain : Adjust impact height based on known terrain elevation data. Summary Realistic Factor Effect on Range Modeling Approach Uneven Terrain Alters time of flight Quadratic equation with height offset Air Resistance Shortens range significantly Numerical solution of ODEs Wind Alters path and accuracy Adjust velocity components By expanding our model, we bridge the gap between ideal physics and real-world scenarios, increasing the accuracy and relevance of projectile analysis. Implementation: Computational Simulation of Projectile Motion This section provides a Python implementation to simulate projectile motion, analyze the range as a function of angle, and visualize the effects of varying initial conditions. Objective Simulate projectile motion under ideal conditions. Plot Range vs. Angle of Projection . Allow the user to vary: Initial velocity \\(v_0\\) Gravitational acceleration \\(g\\) Initial height \\(h_0\\) Python Code (Jupyter Notebook Compatible) import numpy as np import matplotlib.pyplot as plt # --- Function to calculate range --- def calculate_range(v0, angle_deg, g=9.81, h0=0): angle_rad = np.radians(angle_deg) v0x = v0 * np.cos(angle_rad) v0y = v0 * np.sin(angle_rad) if h0 == 0: # Flat terrain (simplified range formula) R = (v0**2 * np.sin(2 * angle_rad)) / g else: # Non-zero launch height, solve for time of flight and range t_flight = (v0y + np.sqrt(v0y**2 + 2 * g * h0)) / g R = v0x * t_flight return R # --- Function to simulate and plot --- def plot_range_vs_angle(v0, g=9.81, h0=0): angles = np.linspace(0, 90, 500) ranges = [calculate_range(v0, angle, g, h0) for angle in angles] plt.figure(figsize=(10, 6)) plt.plot(angles, ranges, label=f'v\u2080={v0} m/s, g={g} m/s\u00b2, h\u2080={h0} m') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Range vs. Angle of Projection') plt.grid(True) plt.legend() plt.show() # --- Example usage --- # Modify these parameters to explore different conditions initial_velocity = 30 # m/s gravity = 9.81 # m/s\u00b2 initial_height = 0 # m plot_range_vs_angle(initial_velocity, gravity, initial_height)","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#derivation-of-projectile-motion-from-newtons-laws","text":"We begin by considering a projectile launched with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) above the horizontal. The motion can be decomposed into two perpendicular components: Horizontal (x-axis) Vertical (y-axis)","title":"Derivation of Projectile Motion from Newton's Laws"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#assumptions","text":"No air resistance Constant gravitational acceleration \\(g\\) Launched from the origin at time \\(t = 0\\)","title":"Assumptions:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-equations-of-motion","text":"Horizontal motion (constant velocity): Acceleration: \\(a_x=0\\) Velocity: \\(v_x=v_0\\cos(\\theta)\\) Displacement: \\( \\(x(t)=v_0\\cos(\\theta)\\cdot t\\) \\) Vertical motion (accelerated motion): Acceleration: \\(a_y=-g\\) Velocity: \\(v_y=v_0\\sin(\\theta)-gt\\) Displacement: \\( \\(y(t)=v_0\\sin(\\theta)\\cdot t-\\frac{1}{2}gt^2\\) \\)","title":"1. Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-time-of-flight","text":"The projectile hits the ground when \\(y(t) = 0\\) . Solving: \\[ v_0\\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2 = 0 \\] \\[ t(v_0\\sin(\\theta) - \\frac{1}{2}gt) = 0 \\] Non-zero solution: \\[ t = \\frac{2v_0\\sin(\\theta)}{g} \\]","title":"2. Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-horizontal-range-r","text":"Substitute the total time of flight into the horizontal displacement: \\[ R = x(t) = v_0\\cos(\\theta) \\cdot \\frac{2v_0\\sin(\\theta)}{g} \\] \\[ \\boxed{R = \\frac{v_0^2\\sin(2\\theta)}{g}} \\] This shows that range is maximum when \\(\\sin(2\\theta) = 1\\) , i.e. \\(\\theta = 45^\\circ\\)","title":"\u2194 3. Horizontal Range \\(R\\)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-effect-of-initial-conditions-on-range","text":"Initial Velocity \\(v_0\\) : Range is proportional to \\(v_0^2\\) Doubling speed increases range fourfold Angle \\(\\theta\\) : Affects both vertical and horizontal components Maximum range at \\(\\theta = 45^\\circ\\) (in symmetric conditions) Gravitational Acceleration \\(g\\) : Inverse relation: higher gravity \u2192 shorter range Launch Height (not included above) : Adds vertical displacement Increases total time in air \u2192 longer range (needs new derivation)","title":"4. Effect of Initial Conditions on Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#these-equations-form-the-idealized-model-of-projectile-motion-laying-the-foundation-for-further-numerical-or-simulation-based-analysis","text":"","title":"These equations form the idealized model of projectile motion, laying the foundation for further numerical or simulation-based analysis."},{"location":"1%20Physics/1%20Mechanics/Problem_1/#analysis-of-the-range","text":"","title":"Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-mathematical-relationship-between-range-and-angle","text":"Using the derived formula from earlier: \\[ R=\\frac{v_0^2\\sin(2\\theta)}{g} \\] Where: - \\(R\\) is the horizontal range - \\(v_0\\) is the initial velocity - \\(\\theta\\) is the launch angle - \\(g\\) is the acceleration due to gravity","title":"1. Mathematical Relationship Between Range and Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#key-observations","text":"Range depends non-linearly on \\(\u03b8\\) through \\(sin(2\u03b8)\\) . The function \\(sin(2\u03b8)\\) reaches its maximum value of 1 when \\(2\u03b8=90\u00b0\\) . Therefore, the maximum range occurs at: \\( \\(\\boxed{\u03b8=45\u00b0}\\) \\)","title":"Key Observations:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-effect-of-initial-velocity-v_0","text":"From the formula: \\[ R\\propto v_0^2 \\] Doubling \\(v_0\\) quadruples the range. Plotting range vs. angle for different velocities shifts the amplitude of the curve but not the position of the peak.","title":"2. Effect of Initial Velocity (\\(v_0\\))"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-effect-of-gravitational-acceleration-g","text":"Range is inversely proportional to \\(g\\) : \\[ R\\propto\\frac{1}{g} \\] Lower gravity (e.g., on the Moon) results in a longer range . Higher gravity (e.g., on Jupiter) produces a shorter range .","title":"3. Effect of Gravitational Acceleration (\\(g\\))"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-launch-height-advanced","text":"When the projectile is launched from a height \\(h>0\\) , total time of flight increases. The vertical displacement becomes: \\[ y(t)=v_0\\sin(\\theta)t-\\frac{1}{2}gt^2+h \\] To find time of flight \\(t_f\\) , solve: \\[ 0=h+v_0\\sin(\\theta)t_f-\\frac{1}{2}gt_f^2 \\] This is a quadratic in \\(t_f\\) : \\[ \\frac{1}{2}gt_f^2-v_0\\sin(\\theta)t_f-h=0 \\] Solve for \\(t_f\\) using the quadratic formula: \\[ t_f=\\frac{v_0\\sin(\\theta)+\\sqrt{(v_0\\sin(\\theta))^2+2gh}}{g} \\] Then calculate range: \\[ R=v_0\\cos(\\theta)\\cdot t_f \\]","title":"4. Launch Height (Advanced)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#note","text":"Range increases with height. The angle for maximum range no longer remains 45\u00b0 when launching from a height.","title":"Note:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#summary","text":"Parameter Effect on Range Initial Velocity \\(v_0\\) Quadratic increase ( \\(\\propto v_0^2\\) ) Launch Angle \\(\\theta\\) Max at \\(45^\\circ\\) (flat launch) Gravity \\(g\\) Inversely proportional Launch Height \\(h\\) Increases range, changes optimal angle","title":"Summary"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#this-analysis-provides-a-full-picture-of-how-the-range-responds-to-varying-parameters-in-ideal-and-slightly-more-realistic-conditions","text":"","title":"This analysis provides a full picture of how the range responds to varying parameters in ideal and slightly more realistic conditions."},{"location":"1%20Physics/1%20Mechanics/Problem_1/#practical-applications-of-projectile-motion","text":"","title":"Practical Applications of Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-real-world-situations-involving-projectile-motion","text":"Projectile motion is observed in various natural and engineered systems: Sports: A soccer ball, basketball, or javelin follows a projectile path after being launched. The initial velocity and launch angle determine whether the ball reaches the goal or basket. Engineering: Water fountains or fire hoses arc based on launch parameters. Ballistics in defense and aerospace engineering heavily depend on accurate projectile modeling. Astrophysics: Space missions use orbital mechanics \u2014 an extension of projectile motion under gravity. Launching a probe involves solving similar equations in non-Earth gravity fields.","title":"1. Real-World Situations Involving Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-effects-of-terrain-drag-and-wind","text":"","title":"2. Effects of Terrain, Drag, and Wind"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#a-uneven-terrain","text":"When projectiles land on non-flat surfaces , the simple range formula no longer applies. Suppose the landing height is different from the launch height \\(h_0\\) , then total time of flight \\(t_f\\) must be found by solving: \\[ y(t)=v_0\\sin(\\theta)t-\\frac{1}{2}gt^2+h_0 \\] Final range becomes: \\[ R=v_0\\cos(\\theta)\\cdot t_f \\] Requires solving a quadratic equation for \\(t_f\\) and using it in range computation.","title":"a. Uneven Terrain"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#b-air-resistance-drag","text":"Real trajectories are affected by drag force proportional to velocity: \\[ F_d=-kv \\] Where: - \\(F_d\\) is the drag force, - \\(k\\) is a constant depending on air density and shape, - \\(v\\) is velocity. This leads to nonlinear differential equations : In horizontal direction: \\( \\(m\\frac{dv_x}{dt}=-kv_x\\) \\) In vertical direction: \\( \\(m\\frac{dv_y}{dt}=-mg-kv_y\\) \\) These must be solved numerically using techniques like Euler\u2019s method or Runge-Kutta.","title":"b. Air Resistance (Drag)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#c-wind","text":"Wind introduces additional velocity components: - Tailwind increases range. - Headwind decreases range. - Crosswind changes the direction of the projectile, affecting accuracy. Effective horizontal velocity becomes: \\[ v_{\\text{effective}}=v_0\\cos(\\theta)\\pm v_{\\text{wind}} \\]","title":"c. Wind"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-adapting-the-model","text":"To make the model more realistic: Include drag : Use numerical simulation (e.g., Runge-Kutta) to solve motion with air resistance. Include wind : Modify initial velocity vector to account for wind speed and direction. Simulate terrain : Adjust impact height based on known terrain elevation data.","title":"3. Adapting the Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#summary_1","text":"Realistic Factor Effect on Range Modeling Approach Uneven Terrain Alters time of flight Quadratic equation with height offset Air Resistance Shortens range significantly Numerical solution of ODEs Wind Alters path and accuracy Adjust velocity components By expanding our model, we bridge the gap between ideal physics and real-world scenarios, increasing the accuracy and relevance of projectile analysis.","title":"Summary"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#implementation-computational-simulation-of-projectile-motion","text":"This section provides a Python implementation to simulate projectile motion, analyze the range as a function of angle, and visualize the effects of varying initial conditions.","title":"Implementation: Computational Simulation of Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#objective","text":"Simulate projectile motion under ideal conditions. Plot Range vs. Angle of Projection . Allow the user to vary: Initial velocity \\(v_0\\) Gravitational acceleration \\(g\\) Initial height \\(h_0\\)","title":"Objective"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#python-code-jupyter-notebook-compatible","text":"","title":"Python Code (Jupyter Notebook Compatible)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#_1","text":"import numpy as np import matplotlib.pyplot as plt # --- Function to calculate range --- def calculate_range(v0, angle_deg, g=9.81, h0=0): angle_rad = np.radians(angle_deg) v0x = v0 * np.cos(angle_rad) v0y = v0 * np.sin(angle_rad) if h0 == 0: # Flat terrain (simplified range formula) R = (v0**2 * np.sin(2 * angle_rad)) / g else: # Non-zero launch height, solve for time of flight and range t_flight = (v0y + np.sqrt(v0y**2 + 2 * g * h0)) / g R = v0x * t_flight return R # --- Function to simulate and plot --- def plot_range_vs_angle(v0, g=9.81, h0=0): angles = np.linspace(0, 90, 500) ranges = [calculate_range(v0, angle, g, h0) for angle in angles] plt.figure(figsize=(10, 6)) plt.plot(angles, ranges, label=f'v\u2080={v0} m/s, g={g} m/s\u00b2, h\u2080={h0} m') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Range vs. Angle of Projection') plt.grid(True) plt.legend() plt.show() # --- Example usage --- # Modify these parameters to explore different conditions initial_velocity = 30 # m/s gravity = 9.81 # m/s\u00b2 initial_height = 0 # m plot_range_vs_angle(initial_velocity, gravity, initial_height)","title":""},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"\ud83d\udcd8 Forced Damped Pendulum Analysis 1. \ud83c\udfaf Theoretical Foundation Governing Equation The general form of the differential equation for a forced damped pendulum is: \\[\\frac{d^2\\theta}{dt^2}+\\gamma\\frac{d\\theta}{dt}+\\omega_0^2\\sin(\\theta)=A\\cos(\\omega t)\\] Where: - \\(\\theta(t)\\) : Angular displacement - \\(\\gamma\\) : Damping coefficient - \\(\\omega_0\\) : Natural frequency - \\(A\\) : Driving amplitude - \\(\\omega\\) : Driving frequency Small-Angle Approximation For small \\(\\theta\\) , we use the approximation: \\[\\sin(\\theta)\\approx\\theta\\] The equation becomes linear: \\[\\frac{d^2\\theta}{dt^2}+\\gamma\\frac{d\\theta}{dt}+\\omega_0^2\\theta=A\\cos(\\omega t)\\] Resonance Condition Resonance occurs when the driving frequency \\(\\omega\\) approaches the natural frequency \\(\\omega_0\\) , leading to maximum amplitude in steady-state oscillations. 2. \ud83d\udcca Analysis of Dynamics Study the effects of: - Damping ( \\(\\gamma\\) ) - Driving amplitude ( \\(A\\) ) - Driving frequency ( \\(\\omega\\) ) Regular vs Chaotic Motion Regular: predictable, periodic response Chaotic: sensitive to initial conditions, non-repeating patterns 3. \ud83c\udf0d Practical Applications Real-world systems modeled by the forced damped pendulum: - \u2699\ufe0f Energy harvesting devices - \ud83c\udf09 Suspension bridges under wind loads - \ud83d\udd0c RLC electrical circuits with alternating current 4. \ud83d\udcbb Implementation in Python ```python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp Parameters gamma = 0.2 omega0 = 1.5 A = 1.2 omega = 0.7 def forced_damped_pendulum(t, y): theta, dtheta = y d2theta = -gamma * dtheta - omega0**2 * np.sin(theta) + A * np.cos(omega * t) return [dtheta, d2theta] Initial conditions y0 = [0.2, 0.0] t_span = (0, 100) t_eval = np.linspace(*t_span, 2000) sol = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval) Plotting plt.figure(figsize=(10, 5)) plt.plot(sol.t, sol.y[0]) plt.title(\"Forced Damped Pendulum: Angular Displacement vs Time\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.show()","title":"\ud83d\udcd8 Forced Damped Pendulum Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#forced-damped-pendulum-analysis","text":"","title":"\ud83d\udcd8 Forced Damped Pendulum Analysis"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"","title":"1. \ud83c\udfaf Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-equation","text":"The general form of the differential equation for a forced damped pendulum is: \\[\\frac{d^2\\theta}{dt^2}+\\gamma\\frac{d\\theta}{dt}+\\omega_0^2\\sin(\\theta)=A\\cos(\\omega t)\\] Where: - \\(\\theta(t)\\) : Angular displacement - \\(\\gamma\\) : Damping coefficient - \\(\\omega_0\\) : Natural frequency - \\(A\\) : Driving amplitude - \\(\\omega\\) : Driving frequency","title":"Governing Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small \\(\\theta\\) , we use the approximation: \\[\\sin(\\theta)\\approx\\theta\\] The equation becomes linear: \\[\\frac{d^2\\theta}{dt^2}+\\gamma\\frac{d\\theta}{dt}+\\omega_0^2\\theta=A\\cos(\\omega t)\\]","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance-condition","text":"Resonance occurs when the driving frequency \\(\\omega\\) approaches the natural frequency \\(\\omega_0\\) , leading to maximum amplitude in steady-state oscillations.","title":"Resonance Condition"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"Study the effects of: - Damping ( \\(\\gamma\\) ) - Driving amplitude ( \\(A\\) ) - Driving frequency ( \\(\\omega\\) )","title":"2. \ud83d\udcca Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#regular-vs-chaotic-motion","text":"Regular: predictable, periodic response Chaotic: sensitive to initial conditions, non-repeating patterns","title":"Regular vs Chaotic Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"Real-world systems modeled by the forced damped pendulum: - \u2699\ufe0f Energy harvesting devices - \ud83c\udf09 Suspension bridges under wind loads - \ud83d\udd0c RLC electrical circuits with alternating current","title":"3. \ud83c\udf0d Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation-in-python","text":"```python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp","title":"4. \ud83d\udcbb Implementation in Python"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameters","text":"gamma = 0.2 omega0 = 1.5 A = 1.2 omega = 0.7 def forced_damped_pendulum(t, y): theta, dtheta = y d2theta = -gamma * dtheta - omega0**2 * np.sin(theta) + A * np.cos(omega * t) return [dtheta, d2theta]","title":"Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#initial-conditions","text":"y0 = [0.2, 0.0] t_span = (0, 100) t_eval = np.linspace(*t_span, 2000) sol = solve_ivp(forced_damped_pendulum, t_span, y0, t_eval=t_eval)","title":"Initial conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#plotting","text":"plt.figure(figsize=(10, 5)) plt.plot(sol.t, sol.y[0]) plt.title(\"Forced Damped Pendulum: Angular Displacement vs Time\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.show()","title":"Plotting"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}